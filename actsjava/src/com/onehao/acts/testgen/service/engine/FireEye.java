package com.onehao.acts.testgen.service.engine;

import com.onehao.acts.testgen.common.SUT;
import com.onehao.acts.testgen.common.TestGenProfile;
import com.onehao.acts.testgen.common.TestSet;
import com.onehao.acts.testgen.service.exception.OperationServiceException;

/**
 * 
 * @author wanhao01 
 * generate the test using the ipo(In Parameter Order) method, 
 * the purpose is generating the parameter based test coverage and the number of the cases should be minimum.
 */

public class FireEye {
    public static final String DEFAULT_OUTPUT_FILENAME = "output.txt";
    public static boolean verbose = false;

    /***
     * 
     * @param ts
     * @param sut
     * @return test set, generated by the IPOG.
     * @throws OperationServiceException
     * @author wanhao01
     * @since 2015/02/15
     */
    public static TestSet generateTestSet(TestSet ts, SUT sut) throws OperationServiceException {
        TestSet rval = null;

        TestGenProfile profile = TestGenProfile.instance();
        if (verbose) {
            System.out.println("Algorithm: " + profile.getAlgorithm());
            System.out.println("DOI: " + profile.getDOI());
            System.out.println("Mode: " + profile.getMode());
            System.out.println("VUnit: " + profile.getVUnit());
            System.out.println("Hunit: " + profile.getHUnit());
            System.out.println("ProgressOn: " + profile.isProgressOn());
            System.out.println("FastMode: " + profile.isFastMode());
        }
        

        long start = System.currentTimeMillis();
        
        //wanhao01:check whether the generator is using the doubling construction.
        if (profile.getAlgorithm() == TestGenProfile.Algorithm.ipog_d) {
            BinaryBuilder builder = new BinaryBuilder(sut.getParams(), sut.getOutputParameters());
            rval = builder.getTestSet(sut.getOutputParameters());
        }
        //wanhao01 if not specifiying the ipog_d methond then using the in parameter order generator by default.
        else {
            Builder builder = new Builder(sut);
            rval = builder.generate(TestGenProfile.Algorithm.ipog);
        }
        float duration = (float) (System.currentTimeMillis() - start) / 1000.0F;


        System.out.println("Number of Tests\t: " + rval.getNumOfTests());
        System.out.println("Time (seconds)\t: " + duration + " ");

        rval.setGenerationTime(duration);
        if (profile.checkCoverage()) {
            System.out.println("\nCoverage Check:");

            CoverageChecker checker = new CoverageChecker(rval, sut);
            if (checker.check()) {
                System.out.println("Coverage has been verified!");
            } else {
                System.out.println("Failed to verify coverage!");
            }
        }
        System.out.println();
        return rval;
    }
}
